// src/app/api/admin/create-user/route.js
import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'

// Configuration Admin Supabase (utilise la cl√© service)
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY, // Cl√© secr√®te c√¥t√© serveur
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export async function POST(request) {
  try {
    console.log('üìã D√©but de la cr√©ation d\'utilisateur');
    
    const { username, nom, telephone, role, password, force_password_change } = await request.json()
    
    // Validation des donn√©es
    if (!username || !nom || !role || !password) {
      console.error('‚ùå Donn√©es manquantes:', { username, nom, role, password: '***' });
      return NextResponse.json(
        { error: 'Donn√©es manquantes. Tous les champs obligatoires doivent √™tre remplis.' },
        { status: 400 }
      )
    }

    // V√©rifier le token ET les permissions
    const authHeader = request.headers.get('authorization')
    if (!authHeader) {
      console.error('‚ùå Pas de header d\'autorisation');
      return NextResponse.json(
        { error: 'Non autoris√© - Token manquant' },
        { status: 401 }
      )
    }

    // Extraire et v√©rifier le token
    const token = authHeader.replace('Bearer ', '')
    
    // V√©rifier que l'utilisateur est admin via Supabase
    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token)
    
    if (authError || !user) {
      console.error('‚ùå Token invalide:', authError);
      return NextResponse.json(
        { error: 'Token invalide ou expir√©' },
        { status: 401 }
      )
    }

    // V√©rifier le r√¥le admin
    const { data: profile, error: profileError } = await supabaseAdmin
      .from('profiles')
      .select('role, username')
      .eq('id', user.id)
      .single()

    if (profileError || !profile) {
      console.error('‚ùå Profil admin non trouv√©:', profileError);
      return NextResponse.json(
        { error: 'Profil administrateur non trouv√©' },
        { status: 403 }
      )
    }

    if (profile.role !== 'admin' && profile.username !== 'proprietaire') {
      console.error('‚ùå Permissions insuffisantes pour:', profile.username);
      return NextResponse.json(
        { error: 'Permissions insuffisantes - Seuls les administrateurs peuvent cr√©er des utilisateurs' },
        { status: 403 }
      )
    }

    console.log('‚úÖ Autorisation valid√©e pour:', profile.username);

    // Nettoyer et valider le username
    const cleanUsername = username.toLowerCase().trim().replace(/[^a-z0-9_]/g, '')
    if (!cleanUsername || cleanUsername.length < 2) {
      console.error('‚ùå Username invalide:', username, '‚Üí', cleanUsername)
      return NextResponse.json(
        { error: 'Le nom d\'utilisateur doit contenir au moins 2 caract√®res alphanum√©riques' },
        { status: 400 }
      )
    }

    console.log('üìù Username nettoy√©:', cleanUsername);

    // V√©rifier si le nom d'utilisateur existe d√©j√† dans profiles
    const { data: existingProfile, error: checkError } = await supabaseAdmin
      .from('profiles')
      .select('id, username')
      .eq('username', cleanUsername)
      .maybeSingle()

    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('‚ùå Erreur v√©rification username:', checkError);
      return NextResponse.json(
        { error: 'Erreur lors de la v√©rification du nom d\'utilisateur' },
        { status: 500 }
      )
    }

    if (existingProfile) {
      console.error('‚ùå Username d√©j√† existant:', cleanUsername)
      return NextResponse.json(
        { error: `Le nom d'utilisateur "${cleanUsername}" existe d√©j√†` },
        { status: 400 }
      )
    }

    // Construire l'email √† partir du username
    const email = `${cleanUsername}@shine.local`
    console.log('üìß Email g√©n√©r√©:', email)

    // V√©rifier si l'email existe d√©j√† dans auth.users
    try {
      const { data: listData, error: listError } = await supabaseAdmin.auth.admin.listUsers()
      
      if (listError) {
        console.error('‚ùå Erreur listUsers:', listError);
        // Continue m√™me si on ne peut pas v√©rifier
      } else if (listData?.users) {
        const emailExists = listData.users.some(u => u.email === email)
        
        if (emailExists) {
          console.error('‚ùå Email d√©j√† existant dans auth:', email)
          return NextResponse.json(
            { error: `L'email ${email} est d√©j√† enregistr√© dans le syst√®me` },
            { status: 400 }
          )
        }
      }
    } catch (listErr) {
      console.warn('‚ö†Ô∏è Impossible de v√©rifier les emails existants:', listErr);
      // Continue quand m√™me
    }

    // 1. Cr√©er l'utilisateur dans auth.users
    console.log('üîÑ Cr√©ation utilisateur auth...')
    
    const { data: authData, error: createAuthError } = await supabaseAdmin.auth.admin.createUser({
      email: email,
      password: password,
      email_confirm: true, // Confirmer automatiquement l'email
      user_metadata: {
        username: cleanUsername,
        nom: nom.trim(),
        role: role,
        telephone: telephone?.trim() || ''
      }
    })

    if (createAuthError) {
      console.error('‚ùå Erreur cr√©ation auth user:', createAuthError)
      
      // Gestion d'erreurs sp√©cifiques
      if (createAuthError.message?.includes('already registered') || 
          createAuthError.message?.includes('already exists') ||
          createAuthError.code === '23505') {
        return NextResponse.json(
          { error: `L'utilisateur ${cleanUsername} existe d√©j√†` },
          { status: 400 }
        )
      }
      
      if (createAuthError.message?.includes('Database error')) {
        return NextResponse.json(
          { error: 'Erreur de base de donn√©es. V√©rifiez votre configuration Supabase.' },
          { status: 500 }
        )
      }

      if (createAuthError.message?.includes('password')) {
        return NextResponse.json(
          { error: 'Le mot de passe ne respecte pas les crit√®res de s√©curit√© (min. 6 caract√®res)' },
          { status: 400 }
        )
      }
      
      return NextResponse.json(
        { error: `Erreur de cr√©ation: ${createAuthError.message}` },
        { status: 400 }
      )
    }

    if (!authData?.user?.id) {
      console.error('‚ùå Pas d\'ID utilisateur retourn√©');
      return NextResponse.json(
        { error: 'Erreur lors de la cr√©ation de l\'utilisateur - ID manquant' },
        { status: 500 }
      )
    }

    console.log('‚úÖ Utilisateur auth cr√©√© avec ID:', authData.user.id)

    // 2. Attendre que le trigger ou RLS cr√©e le profil
    console.log('‚è≥ Attente de la cr√©ation automatique du profil...')
    await new Promise(resolve => setTimeout(resolve, 3000))

    // 3. V√©rifier si le profil existe
    let profileData = null
    let retries = 3
    
    while (retries > 0 && !profileData) {
      const { data: checkProfile } = await supabaseAdmin
        .from('profiles')
        .select('*')
        .eq('id', authData.user.id)
        .maybeSingle()
      
      if (checkProfile) {
        profileData = checkProfile
        console.log('‚úÖ Profil trouv√© apr√®s trigger')
        break
      }
      
      retries--
      if (retries > 0) {
        console.log(`‚è≥ Attente suppl√©mentaire... (${retries} essais restants)`)
        await new Promise(resolve => setTimeout(resolve, 2000))
      }
    }

    // 4. Si le profil n'existe pas, le cr√©er manuellement
    if (!profileData) {
      console.log('üìù Cr√©ation manuelle du profil...')
      
      const { data: newProfile, error: profileError } = await supabaseAdmin
        .from('profiles')
        .insert({
          id: authData.user.id,
          username: cleanUsername,
          nom: nom.trim(),
          telephone: telephone?.trim() || '',
          role: role,
          actif: true,
          force_password_change: force_password_change !== false,
          last_password_change: null,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .select()
        .single()

      if (profileError) {
        console.error('‚ùå Erreur cr√©ation profil:', profileError)
        
        // Nettoyer l'utilisateur auth cr√©√©
        try {
          await supabaseAdmin.auth.admin.deleteUser(authData.user.id)
          console.log('üóëÔ∏è Utilisateur auth supprim√© suite √† l\'√©chec du profil')
        } catch (cleanupError) {
          console.error('‚ùå Impossible de nettoyer l\'utilisateur auth:', cleanupError)
        }
        
        if (profileError.code === '23505') {
          return NextResponse.json(
            { error: 'Conflit lors de la cr√©ation du profil. R√©essayez.' },
            { status: 409 }
          )
        }
        
        return NextResponse.json(
          { error: `Erreur de cr√©ation du profil: ${profileError.message}` },
          { status: 400 }
        )
      }

      profileData = newProfile
    } else {
      // 5. Si le profil existe (cr√©√© par trigger), le mettre √† jour
      console.log('üìù Mise √† jour du profil existant...')
      
      const { data: updatedProfile, error: updateError } = await supabaseAdmin
        .from('profiles')
        .update({
          username: cleanUsername,
          nom: nom.trim(),
          telephone: telephone?.trim() || '',
          role: role,
          actif: true,
          force_password_change: force_password_change !== false,
          updated_at: new Date().toISOString()
        })
        .eq('id', authData.user.id)
        .select()
        .single()

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour profil:', updateError)
        
        // Nettoyer l'utilisateur auth cr√©√©
        try {
          await supabaseAdmin.auth.admin.deleteUser(authData.user.id)
          console.log('üóëÔ∏è Utilisateur auth supprim√© suite √† l\'√©chec de mise √† jour')
        } catch (cleanupError) {
          console.error('‚ùå Impossible de nettoyer l\'utilisateur auth:', cleanupError)
        }
        
        return NextResponse.json(
          { error: `Erreur de mise √† jour du profil: ${updateError.message}` },
          { status: 400 }
        )
      }

      profileData = updatedProfile
    }

    console.log('‚úÖ Profil finalis√©:', profileData.username)

    // 6. Log optionnel de cr√©ation
    try {
      await supabaseAdmin
        .from('password_change_log')
        .insert({
          user_id: authData.user.id,
          changed_by: user.id,
          reason: 'Account created by admin',
          created_at: new Date().toISOString()
        })
      console.log('üìã Log de cr√©ation ajout√©')
    } catch (logError) {
      console.warn('‚ö†Ô∏è Impossible d\'ajouter le log (non bloquant):', logError.message)
    }

    // 7. Retourner le succ√®s
    const responseData = {
      success: true,
      user: {
        id: authData.user.id,
        email: authData.user.email,
        username: profileData.username,
        nom: profileData.nom,
        telephone: profileData.telephone,
        role: profileData.role,
        force_password_change: profileData.force_password_change,
        actif: profileData.actif,
        created_at: profileData.created_at
      },
      message: `Utilisateur ${cleanUsername} cr√©√© avec succ√®s !`
    }

    console.log('üéâ Cr√©ation termin√©e avec succ√®s pour:', cleanUsername)
    return NextResponse.json(responseData, { status: 201 })

  } catch (error) {
    console.error('‚ùå Erreur globale non g√©r√©e:', error)
    
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      },
      { status: 500 }
    )
  }
}
