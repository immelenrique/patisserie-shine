// src/lib/admin.js - Service pour cr√©ation d'utilisateurs (AVANC√â)


import { createClient } from '@supabase/supabase-js'

// Configuration Admin (JAMAIS exposer c√¥t√© client)
const supabaseAdmin = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY, // Cl√© service role (secr√®te)
  {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  }
)

export const adminService = {
  // Cr√©er un nouvel utilisateur (API Admin)
 // Remplacez la fonction createUser dans /src/lib/supabase.js par celle-ci :

async createUser(userData) {
  try {
    console.log('üîÑ D√©but cr√©ation utilisateur:', userData.username);
    
    // R√©cup√©rer le token de session pour l'autorisation
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      console.error('‚ùå Pas de session active');
      return { 
        user: null, 
        error: 'Vous devez √™tre connect√© en tant qu\'administrateur pour cr√©er un utilisateur' 
      };
    }

    // Appeler l'API route qui utilise supabaseAdmin.auth.admin.createUser()
    console.log('üì° Appel de l\'API /api/admin/create-user');
    const response = await fetch('/api/admin/create-user', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      },
      body: JSON.stringify({
        username: userData.username,
        nom: userData.nom,
        telephone: userData.telephone || '',
        role: userData.role,
        password: userData.password,
        force_password_change: userData.force_password_change !== false // true par d√©faut
      })
    });

    // R√©cup√©rer la r√©ponse
    const data = await response.json();
    console.log('üì• R√©ponse API:', response.status, data);

    // G√©rer les erreurs HTTP
    if (!response.ok) {
      console.error('‚ùå Erreur API:', data.error);
      
      // Messages d'erreur personnalis√©s selon le code de statut
      if (response.status === 401) {
        return { 
          user: null, 
          error: 'Non autoris√©. Vous devez √™tre administrateur.' 
        };
      }
      
      if (response.status === 400) {
        // Erreurs de validation
        return { 
          user: null, 
          error: data.error || 'Donn√©es invalides' 
        };
      }
      
      if (response.status === 409) {
        // Conflit (utilisateur existe d√©j√†)
        return { 
          user: null, 
          error: data.error || 'Cet utilisateur existe d√©j√†' 
        };
      }
      
      // Autres erreurs
      return { 
        user: null, 
        error: data.error || 'Erreur lors de la cr√©ation de l\'utilisateur' 
      };
    }

    // Succ√®s !
    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', data.user.username);
    
    // Retourner l'utilisateur cr√©√©
    return { 
      user: data.user, 
      error: null 
    };
    
  } catch (error) {
    // Erreurs r√©seau ou autres erreurs inattendues
    console.error('‚ùå Erreur inattendue dans createUser:', error);
    
    if (error.message === 'Failed to fetch') {
      return { 
        user: null, 
        error: 'Erreur de connexion au serveur. V√©rifiez votre connexion internet.' 
      };
    }
    
    return { 
      user: null, 
      error: error.message || 'Erreur inattendue lors de la cr√©ation de l\'utilisateur' 
    };
  }
},

  // D√©sactiver un utilisateur
  async deactivateUser(userId) {
    try {
      // D√©sactiver dans auth
      const { data, error: authError } = await supabaseAdmin.auth.admin.updateUserById(
        userId,
        { ban_duration: "876000h" } // Ban pour ~100 ans
      )

      if (authError) throw authError

      // Marquer comme inactif dans profiles
      const { error: profileError } = await supabaseAdmin
        .from('profiles')
        .update({ actif: false })
        .eq('id', userId)

      if (profileError) throw profileError

      return { success: true, error: null }
    } catch (error) {
      return { success: false, error: error.message }
    }
  }
}
